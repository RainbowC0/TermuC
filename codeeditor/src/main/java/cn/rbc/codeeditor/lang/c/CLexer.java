// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: c.flex

package cn.rbc.codeeditor.lang.c;

import cn.rbc.codeeditor.util.Lexer;
import cn.rbc.codeeditor.util.*;


@SuppressWarnings("fallthrough")
public class CLexer implements Lexer {

	/** This character denotes the end of file. */
	public static final int YYEOF = -1;

	/** Initial size of the lookahead buffer. */
	private static final int ZZ_BUFFERSIZE = 16384;

	// Lexical states.
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;
	public static final int CHARLITERAL = 4;
	public static final int PRETREATMENT = 6;
	public static final int INCLUDE = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0,  0,  1,  1,  2,  2,  3,  3,  4, 4
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

	private static int [] zzUnpackcmap_top() {
		int [] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\2\7\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\26\4\27\2\30\1\7\1\31\1\32\1\7"+
    "\1\33\1\7\1\6\1\34\1\35\1\36\1\37\1\40"+
    "\1\37\2\41\1\42\2\41\1\43\3\41\1\44\7\41"+
    "\1\45\2\41\1\46\1\47\1\50\1\7\1\51\1\6"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\41\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\41\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\7\1\103\1\7\6\0\1\104"+
    "\32\0\1\105\1\6\4\12\4\6\1\12\2\6\1\0"+
    "\7\6\1\12\4\6\1\12\5\6\27\12\1\6\37\12"+
    "\1\6\u01ca\12\4\6\14\12\16\6\5\12\7\6\1\12"+
    "\1\6\1\12\21\6\160\0\5\12\1\6\2\12\2\6"+
    "\4\12\1\6\1\12\6\6\1\12\1\6\3\12\1\6"+
    "\1\12\1\6\24\12\1\6\123\12\1\6\213\12\1\6"+
    "\5\0\2\6\246\12\1\6\46\12\2\6\1\12\6\6"+
    "\51\12\6\6\1\12\1\6\55\0\1\6\1\0\1\6"+
    "\2\0\1\6\2\0\1\6\1\0\10\6\33\12\4\6"+
    "\4\12\15\6\6\0\5\6\1\12\4\6\13\0\1\6"+
    "\1\0\3\6\53\12\37\0\4\6\2\12\1\0\143\12"+
    "\1\6\1\12\10\0\1\6\6\0\2\12\2\0\1\6"+
    "\4\0\2\12\12\0\3\12\2\6\1\12\17\6\1\0"+
    "\1\12\1\0\36\12\33\0\2\6\131\12\13\0\1\12"+
    "\16\6\12\0\41\12\11\0\2\12\4\6\1\12\2\6"+
    "\1\0\30\12\4\0\1\12\11\0\1\12\3\0\1\12"+
    "\5\0\22\6\31\12\3\0\4\6\13\12\65\6\25\12"+
    "\1\6\22\12\13\6\61\0\66\12\3\0\1\12\22\0"+
    "\1\12\7\0\12\12\2\0\2\6\12\0\1\6\20\12"+
    "\3\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\1\12\3\6\4\12\2\6\1\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\1\12\10\6\1\0"+
    "\4\6\2\12\1\6\3\12\2\0\2\6\12\0\4\12"+
    "\7\6\2\12\1\6\1\0\2\6\3\0\1\6\6\12"+
    "\4\6\2\12\2\6\26\12\1\6\7\12\1\6\2\12"+
    "\1\6\2\12\1\6\2\12\2\6\1\0\1\6\5\0"+
    "\4\6\2\0\2\6\3\0\3\6\1\0\7\6\4\12"+
    "\1\6\1\12\7\6\14\0\3\12\1\0\13\6\3\0"+
    "\1\6\11\12\1\6\3\12\1\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\5\12\2\6\1\0\1\12\10\0"+
    "\1\6\3\0\1\6\3\0\2\6\1\12\17\6\2\12"+
    "\2\0\2\6\12\0\1\6\1\12\7\6\1\12\6\0"+
    "\1\6\3\0\1\6\10\12\2\6\2\12\2\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\7\0\2\6\2\0\2\6\3\0\7\6\3\0"+
    "\4\6\2\12\1\6\3\12\2\0\2\6\12\0\1\6"+
    "\1\12\20\6\1\0\1\12\1\6\6\12\3\6\3\12"+
    "\1\6\4\12\3\6\2\12\1\6\1\12\1\6\2\12"+
    "\3\6\2\12\3\6\3\12\3\6\14\12\4\6\5\0"+
    "\3\6\3\0\1\6\4\0\2\6\1\12\6\6\1\0"+
    "\16\6\12\0\11\6\1\12\6\6\5\0\10\12\1\6"+
    "\3\12\1\6\27\12\1\6\20\12\3\6\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\3\12"+
    "\5\6\2\12\2\0\2\6\12\0\20\6\1\12\3\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\12\12"+
    "\1\6\5\12\2\6\1\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\7\6\1\12\1\6\2\12"+
    "\2\0\2\6\12\0\1\6\2\12\15\6\4\0\11\12"+
    "\1\6\3\12\1\6\51\12\2\0\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\1\12\5\6\3\12\1\0\7\6"+
    "\3\12\2\0\2\6\12\0\12\6\6\12\1\6\3\0"+
    "\1\6\22\12\3\6\30\12\1\6\11\12\1\6\1\12"+
    "\2\6\7\12\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\6\6\12\0\2\6\2\0\15\6\60\12"+
    "\1\0\2\12\7\0\4\6\10\12\10\0\1\6\12\0"+
    "\47\6\2\12\1\6\1\12\1\6\5\12\1\6\30\12"+
    "\1\6\1\12\1\6\12\12\1\0\2\12\11\0\1\12"+
    "\2\6\5\12\1\6\1\12\1\6\6\0\2\6\12\0"+
    "\2\6\4\12\40\6\1\12\27\6\2\0\6\6\12\0"+
    "\13\6\1\0\1\6\1\0\1\6\1\0\4\6\2\0"+
    "\10\12\1\6\44\12\4\6\24\0\1\6\2\0\5\12"+
    "\13\0\1\6\44\0\11\6\1\0\71\6\53\12\24\0"+
    "\1\12\12\0\6\6\6\12\4\0\4\12\3\0\1\12"+
    "\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12"+
    "\17\0\2\6\46\12\1\6\1\12\5\6\1\12\2\6"+
    "\53\12\1\6\115\12\1\6\4\12\2\6\7\12\1\6"+
    "\1\12\1\6\4\12\2\6\51\12\1\6\4\12\2\6"+
    "\41\12\1\6\4\12\2\6\7\12\1\6\1\12\1\6"+
    "\4\12\2\6\17\12\1\6\71\12\1\6\4\12\2\6"+
    "\103\12\2\6\3\0\40\6\20\12\20\6\126\12\2\6"+
    "\6\12\3\6\u016c\12\2\6\21\12\1\105\32\12\5\6"+
    "\113\12\3\6\13\12\7\6\15\12\1\6\4\12\3\0"+
    "\13\6\22\12\3\0\13\6\22\12\2\0\14\6\15\12"+
    "\1\6\3\12\1\6\2\0\14\6\64\12\40\0\3\6"+
    "\1\12\3\6\2\12\1\0\2\6\12\0\41\6\4\0"+
    "\1\6\12\0\6\6\131\12\7\6\5\12\2\0\42\12"+
    "\1\0\1\12\5\6\106\12\12\6\37\12\1\6\14\0"+
    "\4\6\14\0\12\6\12\0\36\12\2\6\5\12\13\6"+
    "\54\12\4\6\32\12\6\6\12\0\46\6\27\12\5\0"+
    "\4\6\65\12\12\0\1\6\35\0\2\6\13\0\6\6"+
    "\12\0\15\6\1\12\10\6\16\0\1\6\2\0\77\6"+
    "\5\0\57\12\21\0\7\12\4\6\12\0\21\6\11\0"+
    "\14\6\3\0\36\12\15\0\2\12\12\0\54\12\16\0"+
    "\14\6\44\12\24\0\10\6\12\0\3\6\3\12\12\0"+
    "\44\12\2\6\11\12\7\6\53\12\2\6\3\12\20\6"+
    "\3\0\1\6\25\0\4\12\1\0\6\12\1\0\2\12"+
    "\3\0\1\12\5\6\300\12\72\0\1\6\5\0\26\12"+
    "\2\6\6\12\2\6\46\12\2\6\6\12\2\6\10\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\37\12"+
    "\2\6\65\12\1\6\7\12\1\6\1\12\3\6\3\12"+
    "\1\6\7\12\3\6\4\12\2\6\6\12\4\6\15\12"+
    "\5\6\3\12\1\6\7\12\3\6\13\105\5\0\30\6"+
    "\2\3\5\0\1\105\17\6\2\12\23\6\1\12\12\6"+
    "\1\105\5\0\1\6\12\0\1\6\1\12\15\6\1\12"+
    "\20\6\15\12\3\6\40\12\20\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\12\4\6\1\12\2\6\12\12"+
    "\1\6\1\12\3\6\5\12\6\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\4\12\1\6\13\12\2\6\4\12"+
    "\5\6\5\12\4\6\1\12\21\6\51\12\u0177\6\57\12"+
    "\1\6\57\12\1\6\205\12\6\6\4\12\3\0\2\12"+
    "\14\6\46\12\1\6\1\12\5\6\1\12\2\6\70\12"+
    "\7\6\1\12\17\6\1\0\27\12\11\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\40\0\57\6"+
    "\1\12\320\6\1\105\4\6\3\12\31\6\11\12\6\0"+
    "\1\6\5\12\2\6\5\12\4\6\126\12\2\6\2\0"+
    "\2\6\3\12\1\6\132\12\1\6\4\12\5\6\53\12"+
    "\1\6\136\12\21\6\40\12\60\6\320\12\100\6\375\12"+
    "\3\6\215\12\103\6\56\12\2\6\15\12\3\6\20\12"+
    "\12\0\2\12\24\6\57\12\1\0\4\6\12\0\1\6"+
    "\37\12\2\0\120\12\2\0\45\6\11\12\2\6\147\12"+
    "\2\6\65\12\2\6\11\12\52\6\15\12\1\0\3\12"+
    "\1\0\4\12\1\0\27\12\5\0\4\6\1\0\13\6"+
    "\1\12\7\6\64\12\14\6\2\0\62\12\22\0\12\6"+
    "\12\0\6\6\22\0\6\12\3\6\1\12\1\6\2\12"+
    "\13\0\34\12\10\0\2\6\27\12\15\0\14\6\35\12"+
    "\3\6\4\0\57\12\16\0\16\6\1\12\12\0\6\6"+
    "\5\12\1\0\12\12\12\0\5\12\1\6\51\12\16\0"+
    "\11\6\3\12\1\0\10\12\2\0\2\6\12\0\6\6"+
    "\27\12\3\6\1\12\3\0\62\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\6"+
    "\3\12\2\6\13\12\5\0\2\6\3\12\2\0\12\6"+
    "\6\12\2\6\6\12\2\6\6\12\11\6\7\12\1\6"+
    "\7\12\1\6\53\12\1\6\16\12\6\6\163\12\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\12\14\6\27\12"+
    "\4\6\61\12\4\6\u0100\106\156\12\2\6\152\12\46\6"+
    "\7\12\14\6\5\12\5\6\1\12\1\0\12\12\1\6"+
    "\15\12\1\6\5\12\1\6\1\12\1\6\2\12\1\6"+
    "\2\12\1\6\154\12\41\6\153\12\22\6\100\12\2\6"+
    "\66\12\50\6\15\12\3\6\20\0\20\6\20\0\3\6"+
    "\2\12\30\6\3\12\31\6\1\12\6\6\5\12\1\6"+
    "\207\12\2\6\1\0\4\6\1\12\13\6\12\0\7\6"+
    "\32\12\4\6\1\12\1\6\32\12\13\6\131\12\3\6"+
    "\6\12\2\6\6\12\2\6\6\12\2\6\3\12\3\6"+
    "\2\12\3\6\2\12\22\6\3\0\4\6\14\12\1\6"+
    "\32\12\1\6\23\12\1\6\2\12\1\6\17\12\2\6"+
    "\16\12\42\6\173\12\105\6\65\12\210\6\1\0\202\6"+
    "\35\12\3\6\61\12\17\6\1\0\37\6\40\12\15\6"+
    "\36\12\5\6\46\12\5\0\5\6\36\12\2\6\44\12"+
    "\4\6\10\12\1\6\5\12\52\6\236\12\2\6\12\0"+
    "\6\6\44\12\4\6\44\12\4\6\50\12\10\6\64\12"+
    "\234\6\67\12\11\6\26\12\12\6\10\12\230\6\6\12"+
    "\2\6\1\12\1\6\54\12\1\6\2\12\3\6\1\12"+
    "\2\6\27\12\12\6\27\12\11\6\37\12\101\6\23\12"+
    "\1\6\2\12\12\6\26\12\12\6\32\12\106\6\70\12"+
    "\6\6\2\12\100\6\1\12\3\0\1\6\2\0\5\6"+
    "\4\0\4\12\1\6\3\12\1\6\35\12\2\6\3\0"+
    "\4\6\1\0\40\6\35\12\3\6\35\12\43\6\10\12"+
    "\1\6\34\12\2\0\31\6\66\12\12\6\26\12\12\6"+
    "\23\12\15\6\22\12\156\6\111\12\67\6\63\12\15\6"+
    "\63\12\15\6\44\12\4\0\10\6\12\0\u0146\6\52\12"+
    "\1\6\2\0\3\6\2\12\116\6\35\12\12\6\1\12"+
    "\10\6\26\12\13\0\137\6\25\12\33\6\27\12\11\6"+
    "\3\0\65\12\17\0\37\6\12\0\17\6\4\0\55\12"+
    "\13\0\2\6\1\0\17\6\1\0\2\6\31\12\7\6"+
    "\12\0\6\6\3\0\44\12\16\0\1\6\12\0\4\6"+
    "\1\12\2\0\1\12\10\6\43\12\1\0\2\6\1\12"+
    "\11\6\3\0\60\12\16\0\4\12\4\6\4\0\1\6"+
    "\14\0\1\12\1\6\1\12\43\6\22\12\1\6\31\12"+
    "\14\0\6\6\1\0\101\6\7\12\1\6\1\12\1\6"+
    "\4\12\1\6\17\12\1\6\12\12\7\6\57\12\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\1\6\2\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\12\6\6\1\0\5\6\5\12\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\12\22\0\4\12\5\6"+
    "\12\0\4\6\1\0\3\12\36\6\60\12\24\0\2\12"+
    "\1\6\1\12\10\6\12\0\246\6\57\12\7\0\2\6"+
    "\11\0\27\6\4\12\2\0\42\6\60\12\21\0\3\6"+
    "\1\12\13\6\12\0\46\6\53\12\15\0\1\12\7\6"+
    "\12\0\66\6\33\12\2\6\17\0\4\6\12\0\306\6"+
    "\54\12\17\0\145\6\100\12\12\0\25\6\10\12\2\6"+
    "\1\12\2\6\10\12\1\6\2\12\1\6\30\12\6\0"+
    "\1\6\2\0\2\6\4\0\1\12\1\0\1\12\2\0"+
    "\14\6\12\0\106\6\10\12\2\6\47\12\7\0\2\6"+
    "\7\0\1\12\1\6\1\12\1\0\33\6\1\12\12\0"+
    "\50\12\7\0\1\12\4\0\10\6\1\0\10\6\1\12"+
    "\13\0\56\12\20\0\3\6\1\12\42\6\71\12\7\6"+
    "\11\12\1\6\45\12\10\0\1\6\10\0\1\12\17\6"+
    "\12\0\30\6\36\12\2\6\26\0\1\6\16\0\111\6"+
    "\7\12\1\6\2\12\1\6\46\12\6\0\3\6\1\0"+
    "\1\6\2\0\1\6\7\0\1\12\1\0\10\6\12\0"+
    "\6\6\6\12\1\6\2\12\1\6\40\12\5\0\1\6"+
    "\2\0\1\6\5\0\1\12\7\6\12\0\u0136\6\23\12"+
    "\4\0\271\6\1\12\54\6\4\12\37\6\232\12\146\6"+
    "\157\12\21\6\304\12\274\6\57\12\1\6\11\0\307\6"+
    "\107\12\271\6\71\12\7\6\37\12\1\6\12\0\146\6"+
    "\36\12\2\6\5\0\13\6\60\12\7\0\11\6\4\12"+
    "\14\6\12\0\11\6\25\12\5\6\23\12\260\6\100\12"+
    "\200\6\113\12\4\6\1\0\1\12\67\0\7\6\4\0"+
    "\15\12\100\6\2\12\1\6\1\12\1\0\13\6\2\0"+
    "\16\6\370\12\10\6\326\12\52\6\11\12\367\6\37\12"+
    "\61\6\3\12\21\6\4\12\10\6\u018c\12\4\6\153\12"+
    "\5\6\15\12\3\6\11\12\7\6\12\12\3\6\2\0"+
    "\1\6\4\0\301\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\12\1\6\107\12"+
    "\1\6\2\12\2\6\1\12\2\6\2\12\2\6\4\12"+
    "\1\6\14\12\1\6\1\12\1\6\7\12\1\6\101\12"+
    "\1\6\4\12\2\6\10\12\1\6\7\12\1\6\34\12"+
    "\1\6\4\12\1\6\5\12\1\6\1\12\3\6\7\12"+
    "\1\6\u0154\12\2\6\31\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\10\12"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\7\0\1\6\21\0"+
    "\2\6\7\0\1\6\2\0\1\6\5\0\325\6\55\12"+
    "\3\6\7\0\7\12\2\6\12\0\4\6\1\12\u0171\6"+
    "\54\12\16\0\5\6\306\12\13\6\7\0\51\6\104\12"+
    "\7\0\1\12\4\6\12\0\u0156\6\1\12\117\6\4\12"+
    "\1\6\33\12\1\6\2\12\1\6\1\12\2\6\1\12"+
    "\1\6\12\12\1\6\4\12\1\6\1\12\1\6\1\12"+
    "\6\6\1\12\4\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\3\12\1\6\2\12\1\6\1\12\2\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\2\12\1\6\1\12\2\6\4\12\1\6\7\12"+
    "\1\6\4\12\1\6\4\12\1\6\1\12\1\6\12\12"+
    "\1\6\21\12\5\6\3\12\1\6\5\12\1\6\21\12"+
    "\u0134\6\12\0\6\6\336\12\42\6\65\12\13\6\336\12"+
    "\2\6\u0182\12\16\6\u0131\12\37\6\36\12\342\6\113\12"+
    "\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

	private static int [] zzUnpackcmap_blocks() {
		int [] result = new int[31232];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int [] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\4\2\14\1\15"+
    "\1\16\1\17\20\6\1\20\1\21\1\22\2\23\1\24"+
    "\1\1\1\25\1\26\1\1\3\27\2\1\10\0\1\30"+
    "\2\31\4\14\2\30\1\0\1\14\1\0\11\6\1\32"+
    "\5\6\1\32\13\6\2\22\1\27\1\0\1\22\1\0"+
    "\1\22\4\0\1\33\6\0\1\31\2\14\1\0\1\30"+
    "\2\14\16\6\1\34\17\6\10\0\2\31\3\14\23\6"+
    "\1\33\4\0\3\14\11\6\3\0\3\14\4\6\2\0"+
    "\3\14\2\6\1\35\3\14\1\6\3\14\1\6\5\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\30\1\0\1\30\1\0"+
    "\4\30";

	private static int [] zzUnpackAction() {
		int [] result = new int[262];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u0163\0\u0163"+
    "\0\u01aa\0\u0163\0\u0163\0\u01f1\0\u0238\0\u0163\0\u0163\0\u0163"+
    "\0\u0163\0\u027f\0\u02c6\0\u030d\0\u0354\0\u0163\0\u0163\0\u0163"+
    "\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u0163\0\u0163\0\u080b\0\u0163\0\u0852\0\u0163\0\u0899\0\u0163"+
    "\0\u0163\0\u08e0\0\u0163\0\u02c6\0\u0927\0\u096e\0\u09b5\0\u01f1"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0163"+
    "\0\u0e25\0\u0163\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u0238\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u0163\0\u15e9"+
    "\0\u1630\0\u096e\0\u096e\0\u09b5\0\u09b5\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad"+
    "\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u0238\0\u1f57\0\u1f9e"+
    "\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u0163\0\u25b8\0\u25ff"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u0163\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u0163"+
    "\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d4b\0\u3d92"+
    "\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c";

	private static int [] zzUnpackRowMap() {
		int [] result = new int[262];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int [] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int [] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\3\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\12\1\21\1\12\1\22"+
    "\1\23\1\24\4\25\1\26\2\12\12\15\1\27\1\6"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\15\1\41\1\15\1\42\4\15\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\3\15\1\51\1\52\1\10"+
    "\1\7\1\6\2\53\1\54\2\53\1\55\2\53\1\56"+
    "\36\53\1\57\37\53\2\60\1\54\2\60\1\55\5\60"+
    "\1\61\33\60\1\62\37\60\2\63\3\54\1\55\15\63"+
    "\1\64\23\63\1\65\34\63\1\54\1\63\2\6\1\63"+
    "\3\54\1\55\2\6\1\66\10\6\2\63\1\64\5\63"+
    "\1\6\1\67\1\6\12\63\3\6\31\63\2\6\1\54"+
    "\1\63\1\6\111\0\1\10\105\0\1\70\2\0\1\70"+
    "\50\0\1\71\1\72\3\0\1\73\1\0\1\74\3\0"+
    "\1\75\3\0\1\76\1\0\1\77\10\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\31\15\2\0"+
    "\1\15\26\0\5\100\74\0\1\101\4\0\1\102\105\0"+
    "\1\100\1\0\1\103\1\104\1\105\1\106\1\107\6\0"+
    "\1\110\1\111\2\0\1\112\1\111\1\113\7\0\1\110"+
    "\1\111\1\110\4\0\1\112\3\0\1\111\6\0\1\113"+
    "\31\0\1\100\1\0\5\25\6\0\1\110\1\111\2\0"+
    "\1\112\1\111\10\0\1\110\1\111\1\110\4\0\1\112"+
    "\3\0\1\111\16\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\1\15\1\114\1\115\3\15\1\116\3\15\3\0"+
    "\31\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\23\15\1\117\5\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\20\15\1\120\10\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\1\15\1\121\6\15\1\122\5\15\1\123\12\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\5\15\1\124\10\15\1\125\12\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\13\15\1\126\1\15\1\127\10\15\1\130"+
    "\2\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\13\15\1\131\2\15\1\132"+
    "\12\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\16\15\1\117\12\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\6\15\1\133\6\15\1\134\13\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\16\15\1\135\12\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\5\15\1\136\23\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\10\15\1\137"+
    "\1\140\10\15\1\141\2\15\1\142\3\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\5\15\3\0\12\15"+
    "\3\0\27\15\1\143\1\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\5\15\3\0\12\15\3\0\15\15"+
    "\1\144\13\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\5\15\3\0\12\15\3\0\16\15\1\145\12\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\10\15\1\146\20\15\2\0\1\15"+
    "\2\0\2\53\1\0\2\53\1\0\2\53\1\0\36\53"+
    "\1\0\37\53\2\0\1\54\104\0\5\147\1\150\100\147"+
    "\1\0\2\60\4\0\76\60\1\0\1\60\3\0\3\63"+
    "\1\151\76\0\1\63\2\0\2\152\4\0\2\152\1\153"+
    "\73\152\1\0\1\152\1\0\2\154\4\0\25\154\1\155"+
    "\50\154\1\0\1\154\57\0\1\156\114\0\1\157\1\0"+
    "\1\160\2\0\1\161\74\0\1\162\6\0\1\163\102\0"+
    "\1\164\115\0\1\165\103\0\1\166\72\0\1\167\60\0"+
    "\5\100\6\0\1\110\1\111\3\0\1\111\10\0\1\110"+
    "\1\111\1\110\10\0\1\111\16\0\16\101\1\170\70\101"+
    "\2\102\4\0\41\102\1\171\34\102\1\0\1\102\23\0"+
    "\1\100\1\0\1\103\1\104\1\105\1\106\1\107\6\0"+
    "\1\110\1\111\2\0\1\112\1\111\10\0\1\110\1\111"+
    "\1\110\4\0\1\112\3\0\1\111\40\0\1\100\1\0"+
    "\4\106\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\172\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\40\0\1\100\1\0\4\173\1\107"+
    "\6\0\1\110\1\111\2\0\1\112\1\111\10\0\1\110"+
    "\1\111\1\110\4\0\1\112\3\0\1\111\40\0\1\100"+
    "\1\0\5\107\6\0\1\110\1\111\3\0\1\111\10\0"+
    "\1\110\1\111\1\110\10\0\1\111\35\0\1\174\1\0"+
    "\1\174\2\0\5\175\102\0\1\176\4\177\3\0\5\177"+
    "\11\0\6\177\27\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\16\15\1\200\12\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\5\15\3\0\12\15"+
    "\3\0\16\15\1\201\12\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\5\15\3\0\12\15\3\0\14\15"+
    "\1\202\14\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\5\15\3\0\12\15\3\0\22\15\1\203\6\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\5\15\1\204\23\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\5\15\3\0\12\15"+
    "\3\0\21\15\1\205\1\206\6\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\1\15\1\207\27\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\15\15\1\210"+
    "\13\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\6\15\1\211\22\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\23\15\1\212\5\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\21\15\1\205\7\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\23\15\1\213"+
    "\5\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\22\15\1\214\6\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\16\15\1\215\12\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\20\15\1\133\10\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\22\15\1\216"+
    "\6\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\15\15\1\217\13\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\7\15\1\220\12\15\1\221\6\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\16\15\1\222\12\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\7\15\1\223\20\15\1\224\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\5\15\3\0\12\15\3\0\1\15"+
    "\1\225\16\15\1\226\10\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\5\15\3\0\12\15\3\0\11\15"+
    "\1\227\17\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\5\15\3\0\12\15\3\0\17\15\1\230\11\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\11\15\1\231\7\15\1\232\7\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\11\15\1\233\1\15\1\234\15\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\11\15\1\235\17\15\2\0\1\15"+
    "\4\0\1\147\106\0\1\63\163\0\1\74\111\0\1\236"+
    "\7\0\1\237\71\0\1\240\122\0\1\241\72\0\1\242"+
    "\10\0\1\166\74\0\1\243\120\0\1\237\72\0\1\244"+
    "\111\0\1\242\122\0\1\245\15\0\16\101\1\170\4\101"+
    "\1\246\63\101\5\102\1\247\41\102\1\171\36\102\23\0"+
    "\1\100\1\0\4\250\1\107\6\0\1\110\1\111\2\0"+
    "\1\112\1\111\10\0\1\110\1\111\1\110\4\0\1\112"+
    "\3\0\1\111\40\0\1\100\1\0\4\251\1\107\6\0"+
    "\1\110\1\111\2\0\1\112\1\111\10\0\1\110\1\111"+
    "\1\110\4\0\1\112\3\0\1\111\42\0\5\175\102\0"+
    "\5\175\6\0\1\110\15\0\1\110\1\0\1\110\53\0"+
    "\1\176\4\177\3\0\5\177\2\0\1\112\6\0\6\177"+
    "\4\0\1\112\46\0\5\252\3\0\5\252\2\0\1\112"+
    "\6\0\6\252\4\0\1\112\22\0\1\15\11\0\1\15"+
    "\11\0\5\15\3\0\12\15\3\0\16\15\1\253\12\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\14\15\1\254\14\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\5\15\3\0\12\15"+
    "\3\0\1\15\1\255\27\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\5\15\3\0\12\15\3\0\16\15"+
    "\1\133\12\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\5\15\3\0\12\15\3\0\1\15\1\256\27\15"+
    "\2\0\1\15\2\0\1\15\11\0\1\15\11\0\5\15"+
    "\3\0\12\15\3\0\5\15\1\133\23\15\2\0\1\15"+
    "\2\0\1\15\11\0\1\15\11\0\5\15\3\0\12\15"+
    "\3\0\3\15\1\257\25\15\2\0\1\15\2\0\1\15"+
    "\11\0\1\15\11\0\5\15\3\0\12\15\3\0\20\15"+
    "\1\216\10\15\2\0\1\15\2\0\1\15\11\0\1\15"+
    "\11\0\5\15\3\0\12\15\3\0\21\15\1\260\1\261"+
    "\6\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\1\15\1\262\27\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\2\15\1\263\26\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\14\15\1\133\14\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\5\15\1\264"+
    "\23\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\1\15\1\134\27\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\7\15\1\216\21\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\11\15\1\265\17\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\23\15\1\264"+
    "\5\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\20\15\1\134\10\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\15\15\1\266\13\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\5\15\1\267\23\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\22\15\1\270"+
    "\6\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\23\15\1\271\5\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\22\15\1\206\6\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\5\15\1\272\23\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\16\15\1\273"+
    "\12\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\11\15\1\274\17\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\4\15\1\216\24\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\1\15\1\275\27\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\13\15\1\205"+
    "\15\15\2\0\1\15\61\0\1\276\105\0\1\276\112\0"+
    "\1\236\113\0\1\277\75\0\1\236\114\0\1\300\102\0"+
    "\1\301\114\0\1\302\20\0\3\102\3\0\41\102\1\171"+
    "\34\102\1\0\1\102\23\0\1\100\1\0\4\303\1\107"+
    "\6\0\1\110\1\111\2\0\1\112\1\111\10\0\1\110"+
    "\1\111\1\110\4\0\1\112\3\0\1\111\40\0\1\100"+
    "\1\0\4\304\1\107\6\0\1\110\1\111\2\0\1\112"+
    "\1\111\10\0\1\110\1\111\1\110\4\0\1\112\3\0"+
    "\1\111\42\0\5\305\3\0\5\305\2\0\1\112\6\0"+
    "\6\305\4\0\1\112\22\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\13\15\1\216\15\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\17\15\1\306\11\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\7\15\1\307\21\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\12\15\1\133"+
    "\16\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\10\15\1\133\20\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\22\15\1\133\6\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\11\15\1\310\17\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\23\15\1\311"+
    "\5\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\13\15\1\312\15\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\20\15\1\273\10\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\21\15\1\313\7\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\5\15\1\233"+
    "\23\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\16\15\1\314\12\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\11\15\1\315\17\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\3\15\1\260\25\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\4\15\1\316"+
    "\24\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\15\15\1\133\13\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\7\15\1\223\21\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\22\15\1\146\6\15\2\0\1\15\73\0\1\276\111\0"+
    "\1\317\77\0\1\320\103\0\1\321\46\0\1\100\1\0"+
    "\4\322\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\323\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\324\3\0\5\324\2\0"+
    "\1\112\6\0\6\324\4\0\1\112\22\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\13\15\1\325"+
    "\15\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\11\15\1\326\17\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\15\15\1\327\13\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\13\15\1\260\15\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\5\15\1\216"+
    "\23\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\22\15\1\330\6\15\2\0"+
    "\1\15\2\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\6\15\1\133\22\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\3\15\1\133\25\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\5\15\1\314"+
    "\23\15\2\0\1\15\57\0\1\331\103\0\1\276\122\0"+
    "\1\332\42\0\1\100\1\0\4\333\1\107\6\0\1\110"+
    "\1\111\2\0\1\112\1\111\10\0\1\110\1\111\1\110"+
    "\4\0\1\112\3\0\1\111\40\0\1\100\1\0\4\334"+
    "\1\107\6\0\1\110\1\111\2\0\1\112\1\111\10\0"+
    "\1\110\1\111\1\110\4\0\1\112\3\0\1\111\42\0"+
    "\5\335\3\0\5\335\2\0\1\112\6\0\6\335\4\0"+
    "\1\112\22\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\5\15\1\336\23\15\2\0\1\15\2\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\15\15\1\337\13\15\2\0\1\15\2\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\23\15\1\205"+
    "\5\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\5\15\1\132\23\15\2\0"+
    "\1\15\60\0\1\340\110\0\1\276\50\0\1\100\1\0"+
    "\4\341\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\342\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\343\3\0\5\343\2\0"+
    "\1\112\6\0\6\343\4\0\1\112\22\0\1\15\11\0"+
    "\1\15\11\0\5\15\3\0\12\15\3\0\26\15\1\216"+
    "\2\15\2\0\1\15\2\0\1\15\11\0\1\15\11\0"+
    "\5\15\3\0\12\15\3\0\1\15\1\344\27\15\2\0"+
    "\1\15\24\0\1\100\1\0\4\345\1\107\6\0\1\110"+
    "\1\111\2\0\1\112\1\111\10\0\1\110\1\111\1\110"+
    "\4\0\1\112\3\0\1\111\40\0\1\100\1\0\4\346"+
    "\1\107\6\0\1\110\1\111\2\0\1\112\1\111\10\0"+
    "\1\110\1\111\1\110\4\0\1\112\3\0\1\111\42\0"+
    "\5\347\3\0\5\347\2\0\1\112\6\0\6\347\4\0"+
    "\1\112\22\0\1\15\11\0\1\15\11\0\5\15\3\0"+
    "\12\15\3\0\20\15\1\350\10\15\2\0\1\15\24\0"+
    "\1\100\1\0\4\351\1\107\6\0\1\110\1\111\2\0"+
    "\1\112\1\111\10\0\1\110\1\111\1\110\4\0\1\112"+
    "\3\0\1\111\40\0\1\100\1\0\4\352\1\107\6\0"+
    "\1\110\1\111\2\0\1\112\1\111\10\0\1\110\1\111"+
    "\1\110\4\0\1\112\3\0\1\111\42\0\5\353\3\0"+
    "\5\353\2\0\1\112\6\0\6\353\4\0\1\112\22\0"+
    "\1\15\11\0\1\15\11\0\5\15\3\0\12\15\3\0"+
    "\27\15\1\216\1\15\2\0\1\15\24\0\1\100\1\0"+
    "\4\354\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\355\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\356\3\0\5\356\2\0"+
    "\1\112\6\0\6\356\4\0\1\112\44\0\1\100\1\0"+
    "\4\357\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\360\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\361\3\0\5\361\2\0"+
    "\1\112\6\0\6\361\4\0\1\112\44\0\1\100\1\0"+
    "\4\362\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\363\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\364\3\0\5\364\2\0"+
    "\1\112\6\0\6\364\4\0\1\112\44\0\1\100\1\0"+
    "\4\365\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\366\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\367\3\0\5\367\2\0"+
    "\1\112\6\0\6\367\4\0\1\112\44\0\1\100\1\0"+
    "\4\370\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\371\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\372\3\0\5\372\2\0"+
    "\1\112\6\0\6\372\4\0\1\112\44\0\1\100\1\0"+
    "\4\373\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\374\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\375\3\0\5\375\2\0"+
    "\1\112\6\0\6\375\4\0\1\112\44\0\1\100\1\0"+
    "\4\376\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\40\0\1\100\1\0\4\377\1\107\6\0\1\110\1\111"+
    "\2\0\1\112\1\111\10\0\1\110\1\111\1\110\4\0"+
    "\1\112\3\0\1\111\42\0\5\u0100\3\0\5\u0100\2\0"+
    "\1\112\6\0\6\u0100\4\0\1\112\44\0\1\100\1\0"+
    "\4\u0101\1\107\6\0\1\110\1\111\2\0\1\112\1\111"+
    "\10\0\1\110\1\111\1\110\4\0\1\112\3\0\1\111"+
    "\42\0\5\u0102\3\0\5\u0102\2\0\1\112\6\0\6\u0102"+
    "\4\0\1\112\44\0\1\100\1\0\4\u0103\1\107\6\0"+
    "\1\110\1\111\2\0\1\112\1\111\10\0\1\110\1\111"+
    "\1\110\4\0\1\112\3\0\1\111\61\0\1\112\20\0"+
    "\1\112\44\0\1\100\1\0\4\u0104\1\107\6\0\1\110"+
    "\1\111\2\0\1\112\1\111\10\0\1\110\1\111\1\110"+
    "\4\0\1\112\3\0\1\111\40\0\1\100\1\0\4\u0105"+
    "\1\107\6\0\1\110\1\111\2\0\1\112\1\111\10\0"+
    "\1\110\1\111\1\110\4\0\1\112\3\0\1\111\40\0"+
    "\1\100\1\0\4\u0106\1\107\6\0\1\110\1\111\2\0"+
    "\1\112\1\111\10\0\1\110\1\111\1\110\4\0\1\112"+
    "\3\0\1\111\40\0\1\100\1\0\5\107\6\0\1\110"+
    "\1\111\2\0\1\112\1\111\10\0\1\110\1\111\1\110"+
    "\4\0\1\112\3\0\1\111\16\0";

	private static int [] zzUnpacktrans() {
		int [] result = new int[16259];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/** Error code for "Unknown internal scanner error". */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/** Error code for "could not match input". */
	private static final int ZZ_NO_MATCH = 1;
	/** Error code for "pushback value was too large". */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\3\11\1\1\2\11\2\1\4\11\4\1\3\11"+
    "\20\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\4\1\10\0\10\1\1\11\1\0\1\11"+
    "\1\0\33\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\1\6\0\3\1\1\0\41\1\10\0\1\11"+
    "\27\1\1\11\4\0\14\1\3\0\7\1\2\0\5\1"+
    "\1\11\15\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\4\1";

	private static int [] zzUnpackAttribute() {
		int [] result = new int[262];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int [] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/** Input device. */
	private java.io.Reader zzReader;

	/** Current state of the DFA. */
	private int zzState;

	/** Current lexical state. */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

	/** Text position at the last accepting state. */
	private int zzMarkedPos;

	/** Current text position in the buffer. */
	private int zzCurrentPos;

	/** Marks the beginning of the {@link #yytext()} string in the buffer. */
	private int zzStartRead;

	/** Marks the last character in the buffer, that has been read from input. */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/** Number of newlines encountered up to the start of the matched text. */
	private int yyline;

	/** Number of characters from the last newline up to the start of the matched text. */
	private int yycolumn;

	/** Number of characters up to the start of the matched text. */
	private long yychar;

	/** Whether the scanner is currently at the beginning of a line. */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/** Whether the user-EOF-code has already been executed. */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */



	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public CLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
	private int zzMaxBufferLen() {
		return Integer.MAX_VALUE;
	}

	/**  Whether the scanner buffer can grow to accommodate a larger token. */
	private boolean zzCanGrow() {
		return true;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @exception java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
							 zzBuffer, 0,
							 zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			if (requested == 0) {
				throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
			}
			else {
				throw new java.io.IOException(
					"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else {                    // There is room in the buffer for at least one more char
					int c = zzReader.read();  // Expecting to read a paired low surrogate char
					if (c == -1) {
						return true;
					} else {
						zzBuffer[zzEndRead++] = (char)c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

    private TextBuffer zzBuf;
    
    public void setDoc(TextBuffer buf) {
        zzBuf = buf;
    }
	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer

		if (zzReader != null) {
			zzReader.close();
		}
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize) {
			zzBuffer = new char[initBufferSize];
		}
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		zzAtBOL  = true;
		zzAtEOF  = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}


	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return zzAtEOF;
	}


	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
	}


	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 *
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return zzBuffer[zzStartRead + position];
	}


	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos-zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 *     {@link #yylength()}.
	 */
	public void yypushback(int number)  {
		if ( number > yylength() )
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}




	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @exception java.io.IOException if any I/O-Error occurs.
	 */
	public int yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;

		int [] zzTransL = ZZ_TRANS;
		int [] zzRowMapL = ZZ_ROWMAP;
		int [] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar+= zzMarkedPosL-zzStartRead;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead  ;
				 zzCurrentPosL < zzMarkedPosL ;
			zzCurrentPosL += zzCharCount ) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is
				// (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ( (zzAttributes & 1) == 1 ) {
				zzAction = zzState;
			}


			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos  = zzCurrentPosL;
						zzMarkedPos   = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL  = zzCurrentPos;
						zzMarkedPosL   = zzMarkedPos;
						zzBufferL      = zzBuffer;
						zzEndReadL     = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 ) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return EOF;
				}
			}
			else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1:
						{ return ERROR;
						}
						// fall through
					case 30: break;
					case 2:
						{ return WHITE_SPACE;
						}
						// fall through
					case 31: break;
					case 3:
						{ return NEW_LINE;
						}
						// fall through
					case 32: break;
					case 4:
						{ return OPERATOR;
						}
						// fall through
					case 33: break;
					case 5:
						{ yybegin(STRING); return STRING_LITERAL;
						}
						// fall through
					case 34: break;
					case 6:
						{ return IDENTIFIER;
						}
						// fall through
					case 35: break;
					case 7:
						{ yybegin(CHARLITERAL);return CHARACTER_LITERAL;
						}
						// fall through
					case 36: break;
					case 8:
						{ return LPAREN;
						}
						// fall through
					case 37: break;
					case 9:
						{ return RPAREN;
						}
						// fall through
					case 38: break;
					case 10:
						{ return COMMA;
						}
						// fall through
					case 39: break;
					case 11:
						{ return DOT;
						}
						// fall through
					case 40: break;
					case 12:
						{ return INTEGER_LITERAL;
						}
						// fall through
					case 41: break;
					case 13:
						{ return SEMICOLON;
						}
						// fall through
					case 42: break;
					case 14:
						{ return LBRACK;
						}
						// fall through
					case 43: break;
					case 15:
						{ return RBRACK;
						}
						// fall through
					case 44: break;
					case 16:
						{ return LBRACE;
						}
						// fall through
					case 45: break;
					case 17:
						{ return RBRACE;
						}
						// fall through
					case 46: break;
					case 18:
						{ return STRING_LITERAL;
						}
						// fall through
					case 47: break;
					case 19:
						{ yybegin(YYINITIAL);return NEW_LINE;
						}
						// fall through
					case 48: break;
					case 20:
						{ yybegin(YYINITIAL);return STRING_LITERAL;
						}
						// fall through
					case 49: break;
					case 21:
						{ return CHARACTER_LITERAL;
						}
						// fall through
					case 50: break;
					case 22:
						{ yybegin(YYINITIAL);return CHARACTER_LITERAL;
						}
						// fall through
					case 51: break;
					case 23:
						{ return PRETREATMENT_LINE;
						}
						// fall through
					case 52: break;
					case 24:
						{ return FLOATING_POINT_LITERAL;
						}
						// fall through
					case 53: break;
					case 25:
						{ return COMMENT;
						}
						// fall through
					case 54: break;
					case 26:
						{ return KEYWORD;
						}
						// fall through
					case 55: break;
					case 27:
						{ { yybegin(PRETREATMENT);return PRETREATMENT_LINE; }
						}
						// fall through
					case 56: break;
					case 28:
						{ return TYPE;
						}
						// fall through
					case 57: break;
					case 29:
						{ yybegin(INCLUDE);return PRETREATMENT_LINE;
						}
						// fall through
					case 58: break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}

